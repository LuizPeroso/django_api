"""
Django settings for blank project.

Generated by 'django-admin startproject' using Django 1.8.12.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', True)

# Enables Tastypie Debug
TASTYPIE_FULL_DEBUG = DEBUG

# Tastypie resource objects per page
API_LIMIT_PER_PAGE = 10000

"""Enables tastypie to receive urls without the bar at the end"""
TASTYPIE_ALLOW_MISSING_SLASH = True

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6y=+^h6ue=!rl$^0a!6_tb7d)!qzprmmagbzp##kgd&f16l(h='

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'raven.contrib.django.raven_compat',

    'tastypie',
    'tastypie_swagger',

    'corsheaders',
)


MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',

    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
)

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.core.context_processors.static'
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME', 'mysql'),
        'USER': os.environ.get('DB_USER', 'root'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'root'),
        'HOST': os.environ.get('DB_HOST', '172.17.0.1'),
        'PORT': os.environ.get('DB_PORT', '3306')
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/collect')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),
)

# Logger config
RAVEN_DSN = os.environ.get('RAVEN_DSN', '')
RAVEN_CONFIG = {
    'dsn': RAVEN_DSN,
}

LOGSTASH_HOST = os.environ.get('LOGSTASH_HOST', 'elk.rj1.muxi.corp')
LOGSTASH_PORT = os.environ.get('LOGSTASH_PORT', 28777)

LOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format':
                '%(levelname)s %(asctime)s %(module)s'
                ' - %(process)d %(thread)d %(message)s'
        },
        'simple_format': {
            'format':
                '{Source: %(name)s, LEVEL: %(levelname)s,'
                ' datetime:%(asctime)s,'
                ' functionName: %(funcName)s: %(lineno)d,'
                ' threadname: %(threadName)s, message: %(message)s}'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple_format'
        },
        'logstash': {
            'level': 'INFO',
            'class': 'logstash.TCPLogstashHandler',
            'host': LOGSTASH_HOST,
            'port': int(LOGSTASH_PORT),
            'version': 1,
            'message_type': 'logstash',
            'fqdn': True,
            # //TODO: CHANGE ME :)
            'tags': ['blank-project'],
            'formatter': 'simple_format'
        },
        'sentry': {
            'level': 'ERROR',
            'message_type': 'sentry',
            'class': 'raven.handlers.logging.SentryHandler',
            'dsn': RAVEN_DSN,
            'formatter': 'simple_format',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'logstash', 'sentry'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}

# CORS configuration.
CORS_ORIGIN_ALLOW_ALL = os.environ.get('CORS_ORIGIN_ALLOW_ALL', True)

# Authentication endpoint
AUTHENTICATION_HOST = os.environ.get(
    'AUTHENTICATION_HOST', 'http://172.17.0.1:8001')
AUTHENTICATION_API = os.environ.get(
    'API_AUTHENTICATION', AUTHENTICATION_HOST + '/api/v1/check')
